@columnWidth: 60px;
@gutter: 10px;
 
@allColumns: @columnWidth * 12;
@allGutters: (@gutter * 12) * 2;
@totalWidth: @allColumns + @allGutters;

// @param logical_width - number of logical counts the column will take 
.theWidth (@logical_width) {
  @gutter_count: (@logical_width - 1) * 2;
  width: (@columnWidth * @logical_width) + (@gutter * @gutter_count);
}

.column-mixin {
	margin: 0 @gutter;
	overflow: hidden;
	float: left;
	display: inline;
}

.width_1  { .column-mixin; .theWidth(1); }
.width_2  { .column-mixin; .theWidth(2); }
.width_3  { .column-mixin; .theWidth(3); }
.width_4  { .column-mixin; .theWidth(4); }
.width_5  { .column-mixin; .theWidth(5); }
.width_6  { .column-mixin; .theWidth(6); }
.width_7  { .column-mixin; .theWidth(7); }
.width_8  { .column-mixin; .theWidth(8); }
.width_9  { .column-mixin; .theWidth(9); }
.width_10 { .column-mixin; .theWidth(10); }
.width_11 { .column-mixin; .theWidth(11); }
.width_12 { .column-mixin; .theWidth(12); }

/* 
.width_1  { .column-mixin; .theWidth(1,0); }
.width_2  { .column-mixin; .theWidth(2,2); }
.width_3  { .column-mixin; .theWidth(3,4); }
.width_4  { .column-mixin; .theWidth(4,6); }
.width_5  { .column-mixin; .theWidth(5,8); }
.width_6  { .column-mixin; .theWidth(6,10); }
.width_7  { .column-mixin; .theWidth(7,12); }
.width_8  { .column-mixin; .theWidth(8,14); }
.width_9  { .column-mixin; .theWidth(9,16); }
.width_10 { .column-mixin; .theWidth(10,18); }
.width_11 { .column-mixin; .theWidth(11,20); }
.width_12 { .column-mixin; .theWidth(12,22); }
*/
 
.row {
	width: @totalWidth;
	margin: 0 auto;
	overflow: hidden;
}
.row .row {
	margin: 0 (@gutter * -1);
	width: auto;
	display: inline-block;
}