grammar Declarative
    rule source_unit
        _ stmts:statements _ {
            def value
                SourceUnit.new(stmts.value)
            end
        }
    end

    rule list_def
        _ "(" _ ")" _ {
            def value
                "new-list-definition"
            end
        }
    end

    rule block
        _ '{' _ statements _ '}' _ {
            def value
                statements.value
            end
        }
    end

    rule statements
        _ stmt:statement* _ {
            def value
                stmt.elements.map do |e| e.value end
            end
        }
    end

    rule statement
        assignment  _ ';' _ {
            def value
                assignment.value
            end
        }
    end

    rule assignment
        _ first:addition others:( _ '=' _ other:addition )* {
            def value
                Assignment.new(
                    [first.value] + others.elements.map do |e| e.other.value end
                )
            end
        }
    end

    rule addition
        _ first:atom others:( _ "+" _ other:atom )* {
            def minify(list)
                list.size == 1 ? list[0] : Addition.new(list)
            end
            def value
                minify( [first.value] + others.elements.map do |e| e.other.value end )
            end
        }
    end

    rule atom
        named_func_def / id / num_const
    end

    rule named_func_def
        _ "def" _space_ id _ "(" _ ")" block {
            def value
                #return "func-def-new: #{text_value}"
                FuncDef.new(id.text_value, nil, block.value)
            end
        }
    end

    rule id
        [_a-zA-Z] [_a-zA-Z0-9]* {
            def value
               IdUse.new(text_value)
            end
        }
    end

    rule num_const
        [0-9]+ {
            def value
                NumLiteral.new( Integer(text_value) )
            end
        }
    end

    rule _space_
        [ \t\r\n]+
    end

    rule _
        [ \t\r\n]*
    end

#
# How to define keywords
#
#    rule def
#        'def' !(!' ' .) {
#            def value
#                "<def>"
#            end
#        }
#    end

end